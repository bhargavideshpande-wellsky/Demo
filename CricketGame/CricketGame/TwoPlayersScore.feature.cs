// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CricketGame
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TwoPlayersScoreFeature : Xunit.IClassFixture<TwoPlayersScoreFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TwoPlayersScore.feature"
#line hidden
        
        public TwoPlayersScoreFeature(TwoPlayersScoreFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TwoPlayersScore", "\tIn order to  enjoy a game of cricket\r\n\tAs a player\r\n\tI want to be told the maxim" +
                    "um score", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="PlayerOne score is zero when game starts and PlayerTwo score is zero")]
        [Xunit.TraitAttribute("FeatureTitle", "TwoPlayersScore")]
        [Xunit.TraitAttribute("Description", "PlayerOne score is zero when game starts and PlayerTwo score is zero")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void PlayerOneScoreIsZeroWhenGameStartsAndPlayerTwoScoreIsZero()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayerOne score is zero when game starts and PlayerTwo score is zero", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.When("PlayerOne starts a game of cricket and PlayerTwo starts a game of cricket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("the PlayerOne score and PlayerTwo score is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="PlayerOne should be able to score run when he starts the game")]
        [Xunit.TraitAttribute("FeatureTitle", "TwoPlayersScore")]
        [Xunit.TraitAttribute("Description", "PlayerOne should be able to score run when he starts the game")]
        public virtual void PlayerOneShouldBeAbleToScoreRunWhenHeStartsTheGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayerOne should be able to score run when he starts the game", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("PlayerOne has started a game of cricket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.When("PlayerOne Score 4 and PlayerTwo Score 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("the PlayerOne wins by 4 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="PlayerTwo should be able to score run when he starts the game")]
        [Xunit.TraitAttribute("FeatureTitle", "TwoPlayersScore")]
        [Xunit.TraitAttribute("Description", "PlayerTwo should be able to score run when he starts the game")]
        public virtual void PlayerTwoShouldBeAbleToScoreRunWhenHeStartsTheGame()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayerTwo should be able to score run when he starts the game", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("PlayerTwo has started a game of cricket", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.When("PlayerTwo Score 4 and PlayerOne Score 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("the PlayerTwo wins by 4 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="PlayerOne and PlayerTwo should be able to score multiple run together")]
        [Xunit.TraitAttribute("FeatureTitle", "TwoPlayersScore")]
        [Xunit.TraitAttribute("Description", "PlayerOne and PlayerTwo should be able to score multiple run together")]
        public virtual void PlayerOneAndPlayerTwoShouldBeAbleToScoreMultipleRunTogether()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayerOne and PlayerTwo should be able to score multiple run together", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("PlayerOne and PlayerTwo  has started running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
 testRunner.When("PlayerOne Score 4 and PlayerTwo Score 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("the PlayerOne wins by 10 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="PlayerOne and PlayerTwo should be able to score equal run")]
        [Xunit.TraitAttribute("FeatureTitle", "TwoPlayersScore")]
        [Xunit.TraitAttribute("Description", "PlayerOne and PlayerTwo should be able to score equal run")]
        public virtual void PlayerOneAndPlayerTwoShouldBeAbleToScoreEqualRun()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayerOne and PlayerTwo should be able to score equal run", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("PlayerOne and PlayerTwo  has started running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.When("PlayerOne Score 10 and PlayerTwo Score 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("the Score is Equal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="PlayerOne should not be able score runs after getting out")]
        [Xunit.TraitAttribute("FeatureTitle", "TwoPlayersScore")]
        [Xunit.TraitAttribute("Description", "PlayerOne should not be able score runs after getting out")]
        public virtual void PlayerOneShouldNotBeAbleScoreRunsAfterGettingOut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayerOne should not be able score runs after getting out", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("PlayerOne and PlayerTwo  has started running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.And("PlayerOne scores 4 runs and PlayerTwo scores 6 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.And("PlayerOne gets out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.When("PlayerOne Score 3 and PlayerTwo Score 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
 testRunner.Then("the PlayerTwo wins by 8 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="PlayerTwo should not be able score runs after getting out")]
        [Xunit.TraitAttribute("FeatureTitle", "TwoPlayersScore")]
        [Xunit.TraitAttribute("Description", "PlayerTwo should not be able score runs after getting out")]
        public virtual void PlayerTwoShouldNotBeAbleScoreRunsAfterGettingOut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("PlayerTwo should not be able score runs after getting out", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("PlayerOne and PlayerTwo  has started running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.And("PlayerOne scores 4 runs and PlayerTwo scores 6 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("PlayerTwo gets out", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.When("PlayerOne Score 3 and PlayerTwo Score 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("the PlayerOne wins by 7 runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TwoPlayersScoreFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TwoPlayersScoreFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
